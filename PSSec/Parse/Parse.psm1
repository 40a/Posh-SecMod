function Import-DNSReconXML
{
    <#
    .Synopsis
    Converts object properties in a DNSRecon XML output file in to objects.
    .DESCRIPTION
    The Import-DNSReconXML cmdlet creates objects from XML files that are generated by DNSRecon DNS Enumeration tool.
    .EXAMPLE
    Returns all records in the XML file
    .EXAMPLE
    Returns the objects for Service Records
    Import-DNSReconXML .\output.xml -Filter SRV
    .EXAMPLE
    Returns the objects for A, AAAA and PTR Records
    Import-DNSReconXML .\output.xml -Filter A,AAAA,PTR
    #>
    [CmdletBinding()]
    Param
    (
        # XML File generated by DNSRecon
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        [ValidateScript({Test-Path $_})] 
        $XMLFile,

        # DNS RR Records to query for
        [Parameter(Mandatory=$false,
                   ValueFromPipelineByPropertyName=$true,
                   Position=1)]
        [ValidateSet("A","AAAA","NS","TXT","SPF","MX","SOA","SRV","PTR")] 
        $Filter
    )

    Begin
    {
        [Array]$dnsrecords = @()
        if ($Filter -eq $null)
        {
            $Filter = "A","AAAA","NS","TXT","SPF","MX","SOA","SRV","PTR"   
        }

        $file = Get-ChildItem $XMLFile
        [xml]$dnsr = [System.IO.File]::ReadAllText($file.FullName)
    }
    Process
    {
        # How many servers
        $record_count = $dnsr.records.record.Length
        # processed server count
        $i = 0;
        # Parse each record
        foreach ($record in $dnsr.records.record) {
            $record_progress = [int][Math]::Ceiling((($i / $record_count) * 100))
            Write-Progress -Activity "Processing XML" -PercentComplete $record_progress -Status "Processing records - $record_progress%" -Id 1;
            
            if ($Filter -contains $record.type) {

                # Check each of the record types
                switch -Regex ($record.type)
                {
                    # Parse SRV records
                    "SRV" 
                    {
                        $DNSRObject = New-Object PSObject -Property @{
                        Type         = $record.type
                        Name         = $record.name
                        Target       = $record.target
                        Address      = $record.address
                        Port         = $record.port
                        ZoneTransfer = $record.zone_server
                        Text         = $null
                        }
                        
                        $dnsrecords += $DNSRObject
                    }

                    # Parse NS records
                    "NS" 
                    {
                        $DNSRObject = New-Object PSObject -Property @{
                        Type         = $record.type
                        Name         = $record.target
                        Target       = $null
                        Address      = $record.address
                        Port         = $null
                        ZoneTransfer = $record.zone_server
                        Text         = $null
                        }
                   
                        $dnsrecords += $DNSRObject
                    }

                    # Parse AAAA, A and PTR records
                    "AAAA|A|PTR"
                    {
                        $DNSRObject = New-Object PSObject -Property @{
                        Type         = $record.type
                        Name         = $record.name
                        Target       = $record.target
                        Address      = $record.address
                        Port         = $record.port
                        ZoneTransfer = $record.zone_server
                        Text         = $null
                        }

                        $dnsrecords += $DNSRObject
                    }

                    # Parse MX records
                    "MX"
                    {
                        $DNSRObject = New-Object PSObject -Property @{
                        Type         = $record.type
                        Name         = $record.exchange
                        Target       = $null
                        Address      = $record.address
                        Port         = $record.port
                        ZoneTransfer = $record.zone_server
                        Text         = $null
                        }

                        $dnsrecords += $DNSRObject
                    }

                    # Parse SOA records
                    "SOA" 
                    {
                        $DNSRObject = New-Object PSObject -Property @{
                        Type         = $record.type
                        Name         = $record.mname
                        Target       = $null
                        Address      = $record.address
                        Port         = $record.port
                        ZoneTransfer = $record.zone_server
                        Text         = $null
                        }

                        $dnsrecords += $DNSRObject
                    }
        
                    "TXT|SPF"
                    {
                        $DNSRObject = New-Object PSObject -Property @{
                        Type         = $record.type
                        Name         = $record.mname
                        Target       = $record.target
                        Address      = $null
                        Port         = $null
                        ZoneTransfer = $record.zone_server
                        Text         = $record.text
                        }

                        $dnsrecords += $DNSRObject
                    }
                }
            }
            $i++
        }
    }
    End
    {
        $dnsrecords
    }
}

function Import-NessusReport
{
	<#
	.Synopsis
	   Converts object properties in a NessusV2 Report file in to objects
	.DESCRIPTION
	   The Import-NessusReport cmdlet creates objects from Nessus v2 files that are generated by the Nessus 4.x or 5.x scanner.
	.EXAMPLE
	   Return object with Profile Configuration info.
	   Import-NessusReport .\report.nessus -InfoType ProfileInfo
	.EXAMPLE
	   Returns objects for each of the hosts scanned with Properties and Report Items for each.
	   Import-NessusReport .\report.nessus
	.EXAMPLE
	   Looks for hosts for which a a Vulnerability was found that a Metasploit exploit exists and return the IP and Name of the Module.
	   Import-NessusReport .\repport.nessus | foreach {$_.reportitems} | where {$_.metasploit -ne $null} | foreach { "$($_.host) $($_.metasploitmodule)"}
	#>
    [CmdletBinding()]
    Param
    (
        # Nessus Version 2 report file
        [Parameter(Mandatory=$true,
                   ValueFromPipelineByPropertyName=$true,
                   Position=0)]
        [ValidateScript({Test-Path $_})] 
        $NessusFile,

        # Type of Information to return
        [Parameter(Mandatory=$false,
                   ValueFromPipelineByPropertyName=$true,
                   Position=1)]
        [ValidateSet("ProfileInfo","Vulnerabilities")] 
        $InfoType = "Vulnerabilities"
    )

    Begin
    {
        $file = Get-ChildItem $NessusFile
        [xml]$nessus = [System.IO.File]::ReadAllText($file.FullName)
    }
    Process
    {
        if ($InfoType -eq "Vulnerabilities")
        {
            # How many servers
            $record_count = $nessus.NessusClientData_v2.Report.ReportHost.Length
            # processed host count
            $i = 0;
            # Declare Array that will be returned with the objects
            $reported_hosts = @()
            # for each of the hosts reported
            foreach ($reporthost in $nessus.NessusClientData_v2.Report.ReportHost) {
                # Declare variables for properties that will form the object
                $hproperties = @{}
                $host_properties = @{}
                $vulns = @()
                $hostip = $reporthost.name
                # Gathering properties for each host
                foreach($hostproperty in $reporthost.HostProperties.tag) 
                {
                    $hproperties += @{($hostproperty.name -replace "-","_") = $hostproperty."#text"}
                }
    
                # Set the Host and Host Properties object properties
                $host_properties += @{Host = $hostip.Trim()}
                $host_properties += @{Host_Properties = New-Object PSObject -Property $hproperties}

                # Collect vulnerable information for each host
                foreach ($reportitem in ($reporthost.ReportItem | where {$_.pluginID -ne "0"})) {
                    
                    $vuln_properties = New-Object PSObject -Property @{
                    Host                 = $hostip.Trim()
                    Port                 = $reportitem.Port
                    ServiceName          = $reportitem.svc_name
                    Severity             = $reportitem.severity
                    PluginID             = $reportitem.pluginID
                    PluginName           = $reportitem.pluginName
                    PluginFamily         = $reportitem.pluginFamily
                    RiskFactor           = $reportitem.risk_factor
                    Synopsis             = $reportitem.synopsis
                    Description          = $reportitem.description
                    Solution             = $reportitem.solution
                    PluginOutput         = $reportitem.plugin_output
                    SeeAlso              = $reportitem.see_also
                    CVE                  = $reportitem.cve
                    BID                  = $reportitem.bid
                    ExternaReference     = $reportitem.xref
                    PatchPublicationDate = $reportitem.patch_publication_date
                    VulnPublicationDate  = $reportitem.vuln_publication_date
                    Exploitability       = $reportitem.exploitability_ease
                    ExploitAvailable     = $reportitem.exploit_available
                    CANVAS               = $reportitem.exploit_framework_canvas
                    Metasploit           = $reportitem.exploit_framework_metasploit
                    COREImpact           = $reportitem.exploit_framework_core
                    MetasploitModule     = $reportitem.metasploit_name
                    CANVASPackage        = $reportitem.canvas_package
                    CVSSVector           = $reportitem.cvss_vector
                    CVSSBase             = $reportitem.cvss_base_score
                    CVSSTemporal         = $reportitem.cvss_temporal_score
                    PluginType           = $reportitem.plugin_type
                    PluginVersion        = $reportitem.plugin_version
                    }
                    
                   
                    $vulns += $vuln_properties
                }
                $host_properties += @{ReportItems = $vulns}
    
                # Create each host object
                $reported_vuln = New-Object PSObject -Property $host_properties
                $reported_hosts += $reported_vuln

                # Provide progress, specially usefull in large reports
                $record_progress = [int][Math]::Ceiling((($i / $record_count) * 100))
                Write-Progress -Activity "Processing Vulnerability Report" -PercentComplete $record_progress -Status "Processing records - $record_progress%" -Id 1;
                $i++
            }
            $reported_hosts
        }
        else
        {
            $prefs = @()
            $ips_plugins =@()
            # Get Server Settings
            $ServerSettings = @{}
            foreach ($serverpref in ($nessus.NessusClientData_v2.Policy.Preferences.ServerPreferences.preference))
            { 
               $ServerSettings += @{$serverpref.name = $serverpref.value 
            }
            
            
            # Policy Name
            $polname = $nessus.NessusClientData_v2.Policy.policyName
            
            # Get policy settings
            $prefobj = $nessus.NessusClientData_v2.Policy.Preferences.PluginsPreferences.ChildNodes
            foreach ($pref in $prefobj) 
            {
                $pref_property = @{}
                foreach ($prefprop in (Get-Member -InputObject $pref -MemberType Property))
                { 
                    $pref_property += @{$prefprop.name = $pref.($prefprop.name.trim())}
                $prefs += New-Object PSObject -Property $pref_property
                }
            }
            
            # Get selected Plugin Families
            $families = @{}
            foreach ($familyitem in ($nessus.NessusClientData_v2.Policy.FamilySelection.FamilyItem))
            { 
                $families += @{$familyitem.familyname = $familyitem.value}
            }

            # Individual Plugin Selection
            $ips = $nessus.NessusClientData_v2.Policy.IndividualPluginSelection.PluginItem 
            foreach ($plugin in $ips)
            {
                
                foreach ($plugprop in (Get-Member -InputObject $plugin -MemberType Property)) 
                { 
                   $plugin_property = @{}
                   $plugin_property += @{$plugprop.name = $plugin.($plugprop.name.trim())}
                   $ips_plugins += New-Object PSObject -Property $plugin_property
                }
            }

        }
        New-Object PSObject -Property @{
        PolicyName                = $polname
        Preferences               = $prefs
        PluginFamilies            = $families
        IndividualPluginSelection = $ips_plugins
        ServerSettings            = $ServerSettings
        }
        $policyobj
        }
    }
    End
    {
    }
}
